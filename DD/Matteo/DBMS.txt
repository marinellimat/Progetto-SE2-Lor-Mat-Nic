DATABASE

To design the DBMS is auspicable to start from the Class Diagram proposed in the RASD. The upper section of the diagram, Power Enjoy excluded, describe the information the system need to process to guarantee a correct and efficient service. Is clear that this set of informations must be  persistent.

(img class diag)

The DBMS must guarantee the correct functioning of concurrent transactions and the ACID properties; a relational DBMS is sufficient to handle the data storage required by the application.
The database structure will be here described by a ER Diagram.
Class Diagram suggests eight main entities: User, Invoice, Vehicle, ElectricCar, Safe Area, Charging Station, Reservation, Ride.
The division between Vehicle and ElectricCar was born to give the possibility to think, in the future, on differentiating the service adding different tipes of Vehicles to the fleet. We would try to make this possibility alive in the database as well.
In the Application server emerges that a division of reservation and ride is useless. One component can handle the entire job, so the same reasoning will be translated into the DBMS.
We have position of Users, Vehicles and Safe Areas. Could be usefull, to avoid redundances or at least to reduce the Database size, have an entity entirely devolved to positioning, related with User, Vehicle, Ride and Safe Area.According to this reasoning, we add the entity Position.

(img ER diag)

ER Diagram is perfectly readable and understandable but some parts need a more accurate description.
User and Vehicle have a (0,1) relation with Position. This data is collected and refreshed constantly by GPS system, the 0 means a malfunctioning deny a correct data, so it will set to NULL.
ElectricCar, intuitively, is a specification of Vehicle. It has the attributes "BatteryLevel" and "IsCharging" that are characteristics proper of electric cars.

DBMS will be realized to exploit a microservices architecture. The database will be divided into sections, each of them will interacts with a specific bin defined in the application server. There is a corrispondence between bin and DBMS, each bin interact at most with one DBMS
Assistnce component rely to an external DBMS managed by the assistance service so in the architecture will not appear the Assistance DBMS.
Obviously all DBMS will be connected as in the ER schema.
A microservices structure will enhance performaces of DBMS, focusing the interaction just between the involved components and not questioning every time the entire database.

(img microservices)

The DMBS will be written in MySQL. MySQL, as the most common language for query ad relations, can perfectly handle the simple structure of the database.
The connection between BDMS and the upper layer (application server) will be managed with Java Persistence API, choice made to maintain the same language used for the application server (Java)