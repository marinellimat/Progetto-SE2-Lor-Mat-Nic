#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage{changepage}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Power EnJoy 
\begin_inset Newline newline
\end_inset

Design Document 
\end_layout

\begin_layout Author
Niccolo' Raspa, Matteo Marinelli
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/polimi.png
	scale 60

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\align center
Software Engineering 2 Course Project
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Subsection
Purpose
\end_layout

\begin_layout Standard
This is the Design Document for the Power Enjoy Service.
 It's aim is to provide a functional description of the main architectural
 components, their interfaces and their interactions, together with the
 algorithms to implement and the User Interface Design.
 Using UML standards, this document will show the structure of the system
 and the relationships between the modules.
 This document is written for project managers, developers, testers and
 Quality Assurance.
 It can be used for a structural overview to help maintenance and further
 development.
\end_layout

\begin_layout Subsection
Scope
\end_layout

\begin_layout Standard
PowerEnjoy is a digital management system for a car-sharing service that
 exclusively employs electric cars.
 It allows registered clients (Power Users) to use a vehicle paying only
 on the basis of the actual use during each individual rental.
 For a more detail description of the domain and the requirements please
 refer to the Requirement and Specification Document.
 
\end_layout

\begin_layout Standard
The software system is divided into four layers, which will be presented
 in the document.
 The architecture has to be easily extensible and maintainable in order
 to provide new functionalities.
 Every component must be conveniently thin and must encapsulate a single
 functionality (high cohesion).
 The dependency between components has to be unidirectional and coupling
 must be avoided in order to increase the reusability of the modules.
\end_layout

\begin_layout Standard
Futhermore, to increase cohesion and decoupling as much individual components
 must not include too many unrelated functionalities and reduce interdependencie
s.
\end_layout

\begin_layout Subsection
Definitions, Acronyms, Abbreviation
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
RASD: Requirements Analysis and Specification Document.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
DD: Design Document.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
DBMS: Relational Data Base Management System.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
DB: Database layer,
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
UI: User Interface.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Backend: Term used to identify the Application server.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Frontend: The components which use the application server services (web
 front-end and the mobile applications).
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
SOA: Service Oriented Architecture.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
JDBC: Java DataBase Connectivity.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
JPA: Java Persistence API.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
EJB: Enterprise JavaBean.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
ACID: Atomicity, Consistency, Integrity and Durability.
\end_layout

\begin_layout Subsection
Reference Documents
\end_layout

\begin_layout Standard
This document refers to the following documents:
\end_layout

\begin_layout Itemize
Project rules of the Software Engineering 2 project 
\end_layout

\begin_layout Itemize
Requirement Analysis and Specification Document (from the previous delivery)
\end_layout

\begin_layout Subsection
Document Structure
\end_layout

\begin_layout Standard
This document is structured in five parts: 
\end_layout

\begin_layout Description
Chapter
\begin_inset space \space{}
\end_inset

1:
\begin_inset space \space{}
\end_inset

Introduction.
 This section provides general information about the DD document and the
 system to be developed.
 
\end_layout

\begin_layout Description
Chapter
\begin_inset space \space{}
\end_inset

2:
\begin_inset space \space{}
\end_inset

Architectural
\begin_inset space \space{}
\end_inset

Design.
 This section shows the main components of the systems with their subcomponents
 and their relationships, along with their static and dynamic design.
 This section will also focus on design choices, styles, patterns and paradigms.
\end_layout

\begin_layout Description
Chapter
\begin_inset space \space{}
\end_inset

3:
\begin_inset space \space{}
\end_inset

Algorithm
\begin_inset space \space{}
\end_inset

Design.
 This section will present and discuss the main algorithms for the core
 functions of the system, independently from their concrete implementation.
\end_layout

\begin_layout Description
Chapter
\begin_inset space \space{}
\end_inset

4:
\begin_inset space \space{}
\end_inset

User
\begin_inset space \space{}
\end_inset

Interface
\begin_inset space \space{}
\end_inset

Design.
 This section shows how the user interface will look like and behave, by
 means of concept graphics and UX modeling.
\end_layout

\begin_layout Description
Chapter
\begin_inset space \space{}
\end_inset

5:
\begin_inset space \space{}
\end_inset

Requirements
\begin_inset space \space{}
\end_inset

Traceability This section shows how the requirements in the RASD are satisfied
 by the design choices, and which compontents will implement them.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Architectural Design
\end_layout

\begin_layout Subsection
Overview
\end_layout

\begin_layout Standard
This chapter provides a comprehensive view over the system components, both
 at a physical and at a logical level.
 This description will follow a top-down approach, starting with the description
 of the high-level components and their relations and interactions.
 We will then reason and describe the single components and the functionalities
 they must implement.
 We will especially focus on the components that implement the core logic
 of our application and using sequence diagrams we will describe the runtime
 behaviour of the system.
 
\end_layout

\begin_layout Standard
We will also include deployment diagrams to show the physical implementation
 of the system.
\end_layout

\begin_layout Subsection
High Level Components 
\end_layout

\begin_layout Standard
Before describing the actual system architecture we introduce the high level
 components of our application.
 Following the requirements and the specification listed on the RASD, we
 identify what components are needed in order to implement them and only
 after we have detected them, we will focus on the architecture and explain
 our architectural decision and the technologies chosen.
 It's important to follow this process to generalize our design as much
 as possibile and abstract from implementation details, in this way we are
 able to describe only the essence of our system.
 
\end_layout

\begin_layout Standard
The starting point to detect the main components is the Class Diagram described
 in the RASD.
 
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/ClassDiagram.png
	lyxscale 20
	scale 35

\end_inset


\end_layout

\begin_layout Standard
\align center
Figure 1: Class Diagram 
\end_layout

\begin_layout Standard
From the diagram we can identify the following high level components:
\end_layout

\begin_layout Description
Client
\begin_inset space \space{}
\end_inset

and
\begin_inset space \space{}
\end_inset

External
\begin_inset space \space{}
\end_inset

Services The boundaries of the Class Diagram shows the normal users of the
 application (User and Power User) and the External Services who interacts
 with the control object to provide additional functionalities.
\end_layout

\begin_layout Description
Application
\begin_inset space \space{}
\end_inset

Server: The control object is implemented in this component.
 It contains all the logic for the system application.
 It will implement all the required functionalities and communicate both
 with the clients and the external services.
 
\end_layout

\begin_layout Description
Database: This component is responsible for data storage and retrieval of
 all the entities rapresented in the top part of the diagram.
 It will not implement any logic but it stores all the information needed
 for the correct functioning of our service.
 It must guarantee ACID properties and be accessible from the Application
 Server.
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
In the figure below we rapresent all the components listed above in a layered
 fashion, highlighting the relations among the different parts: 
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/highlevel.png
	lyxscale 20
	scale 35

\end_inset


\end_layout

\begin_layout Standard
\align center
Figure 1: High Level Components 
\end_layout

\begin_layout Subsection
Component View
\end_layout

\begin_layout Standard
In this subsection we will look inside every single component and describe
 all the internal subcomponents.
 It's important to identify the relevant modules without increasing granularity
 to much.
 This will allow to have an efficient load balance in the present and it
 will be easy to integrate new functionalities in the future.
\end_layout

\begin_layout Standard
In a divide-and-conquer fashion for every component we will specify the
 implementation chosen and at the end we will how to connect the single
 components.
\end_layout

\begin_layout Subsubsection
Application Server
\end_layout

\begin_layout Standard
This components implements the logic of the Power Enjoy Application, it's
 the core of our business and in this part of the document we'll explore
 the subcomponents inside.
 To provide a natural continuation from the RASD, we will start from the
 Class Diagram, and we will focus on the control object.
 We will look at the singles control functions, logically group them in
 cohesive groups and map them in modules of our system.
 
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/ControlComponents.png
	lyxscale 60
	scale 35

\end_inset


\end_layout

\begin_layout Standard
\align center
Figure 2: Mapping of control function to subcomponents of our system
\end_layout

\begin_layout Standard
A brief desription of the functionalities expected from each module:
\end_layout

\begin_layout Description
User
\begin_inset space \space{}
\end_inset

Component This module provides the logic for a User and a Power User regarding
 all the user management features, namely: user login, user registration,
 user deletion, user profile editing.
 It will perform all the validation of the credentials received before inserting
 them into the system.
\end_layout

\begin_layout Description
Location
\begin_inset space \space{}
\end_inset

Component This module handles the position of each car and user of the system.
 It's used to show cars on the map and to perform proximity checks to unlock
 vehicles.
 It also stores location of Safe Areas and Charging Stations.
\end_layout

\begin_layout Description
Reservation
\begin_inset space \space{}
\end_inset

Component This module is responsible to manage all the current reservation
 and to accept new reservations from Power Users.
 and for avoiding undesiderable behaviours (reservation of an unavailable
 car, double-booking and multiple reservations).
 It's strongly connected to the Car Event Component.
 This module keeps track of all the ride informations.
 
\end_layout

\begin_layout Description
Car
\begin_inset space \space{}
\end_inset

Event
\begin_inset space \space{}
\end_inset

Component This modules interfaces with the API of the car on board system.
 It's a 
\begin_inset Quotes eld
\end_inset

low level
\begin_inset Quotes erd
\end_inset

 component that collects all the car data for other components to use and
 can be used to remotly control the vehicle.
 It will signal to the interested component all the events of the car (car
 locking/unlocking, motor ignition, malfunctioning).
\end_layout

\begin_layout Description
Payment
\begin_inset space \space{}
\end_inset

Component This modules interfaces with the API of the Payment Service to
 request payments and receive confirmations.
 It will not perform the fee calculation but it will receive the final price
 and check for price variations via other components It will also flag/unflag
 users as banned in case of Pending Payment.
\end_layout

\begin_layout Description
Assistance
\begin_inset space \space{}
\end_inset

Component This modules interfaces with the API of the Assistance Service
 to request assistance (recharge on site, fix malfunctions, bring car back
 from unsafe to safe areas) and receive confirmations once the assistance
 is provided.
 Once a car is fixed it will update the car informations (e.g.
 new position, new battery level).
\end_layout

\begin_layout Description
Time
\begin_inset space \space{}
\end_inset

Component This is an utility component, it will be responsible for timing
 features such as expiration of the reservation and unsafe park timing.
 This helps to avoid the necessity of introducing stateful components.
\end_layout

\begin_layout Subsubsection*
Implementation Choice
\end_layout

\begin_layout Standard
This component will be implemented using:
\end_layout

\begin_layout Itemize
Jave Enterprise Edition 7 (JEE7) - the platform incorporates a design based
 largely on modular components running on an application server which is
 a natural consequence from the description above.
 It also provides support for large-scale, multi-tiered, scalable, reliable,
 and secure network applications.
 This modularity helps to handle such complex system and it make easy to
 insert the functionalities in the future.
\end_layout

\begin_layout Itemize
Enterprise JavaBeans (EJB) to encapsulate all the business logic of the
 modules described above.
\end_layout

\begin_layout Itemize
GlassFish as the Application Server - the server provides services such
 as security, transaction support, load balancing and supports the JEE7
 platform.
\end_layout

\begin_layout Standard
The next figure will show the Application Component implemented as session
 beans logically grouped in EJBContainers.
 
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/Beans.png
	lyxscale 60
	scale 35

\end_inset


\end_layout

\begin_layout Standard
\align center
Figure 3: Application as Java Entity Beans
\end_layout

\begin_layout Standard
For the sake of clarity some information have been hidden from the diagram
 aboce but can be found in the next sections.
 
\end_layout

\begin_layout Standard
In Section 2.5 we will provide more details on the interfaces of each module.
 
\end_layout

\begin_layout Standard
In Section 2.7 using UML Sequence Diagrams we highlight the relationship
 between each component showing the runtime behaviour of our system.
\end_layout

\begin_layout Subsubsection
Database
\end_layout

\begin_layout Standard
To design the DBMS is auspicable to start from the Class Diagram proposed
 in the RASD.
 The upper section of the diagram, Power Enjoy excluded, describe the informatio
n the system need to process to guarantee a correct and efficient service.
 Is clear that this set of informations must be persistent.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/Entities.png
	lyxscale 20
	scale 45

\end_inset


\end_layout

\begin_layout Standard
\align center
Figure X: Entities in the class Diagram
\end_layout

\begin_layout Standard
The DBMS must guarantee the correct functioning of concurrent transactions
 and the ACID properties; a relational DBMS is sufficient to handle the
 data storage required by the application.
 The database structure will be here described by a ER Diagram.
 
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/ER.png
	lyxscale 20
	scale 45

\end_inset


\end_layout

\begin_layout Standard
\align center
Figure X: Entities in the class Diagram
\end_layout

\begin_layout Standard
Class Diagram suggests eight main entities: User, Invoice, Vehicle, ElectricCar,
 Safe Area, Charging Station, Reservation, Ride.
 The division between Vehicle and ElectricCar was added to give the possibility
 to add, in the future, different types of Vehicles.
 As for the Application Server, the division of reservation and ride is
 redundant and only one entity will be created.
 
\end_layout

\begin_layout Standard
In addition to the class Diagram we've added the entity Position which stores
 the position of Users, Vehicles and Safe Areas.
\end_layout

\begin_layout Subsubsection*
Implementation Choice
\end_layout

\begin_layout Standard
This component will be implemented using:
\end_layout

\begin_layout Itemize
MySQL as the relational DBMS.
 It was chosen for its Scalability, Flexibility, High Performance and High
 Availability.
\end_layout

\begin_layout Itemize
MySQL also provides connectors and drivers (JDBC) that allow all forms of
 applications to make use of MySQL as a preferred data management server.
\end_layout

\begin_layout Itemize
The Java Persistence API (JPA) will be used inside the Application Server
 as an interface with the database to perform object-relation mapping and
 Database access.
\end_layout

\begin_layout Subsubsection
External Services 
\end_layout

\begin_layout Standard
In this section we focus on the components which are not part of our system
 but with which the system depends to implement some functionalities (please
 refer to the RASD for a more detailed description).
\end_layout

\begin_layout Subsubsection*
Car
\begin_inset space \space{}
\end_inset

On
\begin_inset space \space{}
\end_inset

Board
\begin_inset space \space{}
\end_inset

System 
\end_layout

\begin_layout Standard
Every Power Enjoy vehicle comes with a pre-installed embedded system which
 registers and notifies all the car activity.
 This components provides an API to monitor and remotly control every vehicle.
 This component implements some logic and it's connected over GSM to the
 Car Bean of the Application Server.
 The main functionalities that provides are the following:
\end_layout

\begin_layout Enumerate
Provides an interface to access every relevant information of the car (e.g.
 battery level, position)
\end_layout

\begin_layout Enumerate
Automatically signals relevant events to the Car Bean (e.g.
 engine ignition, parking, malfunctioning).
\end_layout

\begin_layout Enumerate
Automatically shows/updates the price on the screen.
\end_layout

\begin_layout Enumerate
Automatically locks the car when the car is parked with no people inside.
\end_layout

\begin_layout Enumerate
Calculates the lenght of every ride (from ignition to parking).
\end_layout

\begin_layout Enumerate
For every ride it calculates the lenght of a shared ride.
 Everytime at least 3 weight sensors in the car seats are on, the car increases
 this time counter
\end_layout

\begin_layout Standard
The communication will be implemented via RESTful APIs.
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Subsubsection*
Assistance Service 
\end_layout

\begin_layout Standard
Power Enjoy is in charge of the management of the car-sharing system.
 All the secondary functionalities (recharging vehicles onsite, bringing
 cars back from unsafe areas and fixing malfunctions) are handled by an
 assistance service.
 This components provides an API to handle all the assistance request.
\end_layout

\begin_layout Standard
The interaction between Application Server and Assistance Service will be
 bidirectional: the application server sends the information about a malfunction
ing car and the type of assistance required and the Assistance service must
 notify the application server when the assistance is provided.
\end_layout

\begin_layout Standard
The communication will be implemented via RESTful APIs.
\end_layout

\begin_layout Subsubsection*
Payment Service
\end_layout

\begin_layout Standard
Every Power Enjoy user, in order to use our service, is required to have
 an account registered to a third party payment service, with a valid payment
 method.
 This components provides an API to handle all the payments functionalities.
 The interaction with such system is standard: the Payment Bean requests
 a payment specifying the fee and the user account, the Payment System will
 manage the payment process (including debt collection in case of negligent
 users) and will notify the Payment Bean when the payment was executed.
 A user with a pending payment will be prevented to reserve another vehicle.
\end_layout

\begin_layout Standard
The communication will be implemented via RESTful APIs.
\end_layout

\begin_layout Subsubsection
Client
\end_layout

\begin_layout Standard
In this subsection we'll focus the client component.
 Power Enjoy is a car sharing service therefore it must be implemented with
 mobility in mind.
 Since the majority of the mobile devices have a GPS module and we need
 to have access to the user position for our application, it makes sense
 to require that the main user has our mobile application installed.
 
\end_layout

\begin_layout Standard
Mobile application can handle all the functionalities required by the applicatio
n server alone but to have a more efficient service, adding a Web Page seems
 to be an optimal strategy to provide more visibility and accessability.
 The Web Page become an optimized platform to manage all the side functionalitie
s, in particular the profile informations management and all the payment
 informations.
 
\end_layout

\begin_layout Standard
This suggests a modification of the architecture, introducing a new tier
 with a Web Server Layer who is a bridge between Web Page and Application
 Server.
 Separating Application Server and Web Server improves scalability as we
 expect Power Enjoy usage to grow in differents regions and in this way
 we are able to separate task and optimize each layer individually to support
 increasing loads.
 
\end_layout

\begin_layout Standard
In conclusion, the subcomponents are the following:
\end_layout

\begin_layout Description
Web
\begin_inset space \space{}
\end_inset

Browser: Using a web browser the user is able to communicate with the Web
 Server to obtain the required web pages.
 
\end_layout

\begin_layout Description
Web
\begin_inset space \space{}
\end_inset

Server: This component does not contain any application logic, it's used
 to provide a web interface interface to the user.
 It helps to separate presentation from logic.
 
\end_layout

\begin_layout Description
Mobile
\begin_inset space \space{}
\end_inset

Application: This component is used by a Power User to use all the functionaliti
es of the Power Enjoy Service.
 It's a really thin client that interacts with the Application Servier.
\end_layout

\begin_layout Subsubsection*
Implementation Choice Web Server
\end_layout

\begin_layout Itemize
WebServer runs on Glassfish with JavaServer Pages (JSP), this was done to
 provide consistency with the Application Component.
\end_layout

\begin_layout Itemize
The communication to the Application Server will be done using JAX-RS (in
 the Application side) to implement proper RESTful APIs.
\end_layout

\begin_layout Subsubsection*
Implementation Choice Mobile App
\end_layout

\begin_layout Itemize
The mobile app will be written with Cordova which is a mobile application
 development framework which is free, open source and it allows to target
 multiple platforms with one code base (with access to Access native device
 APIs).
 This will allow to have reusable code across platforms abstracting from
 different platforms.
 It's the best cost-effective solution to target nearly every phone or tablet
 on the market today and publish to their app stores directly.
 
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsection
Component Interfaces 
\end_layout

\begin_layout Subsubsection*
Application Server 
\end_layout

\begin_layout Standard
QUESTA DA FARE ASSOLUTAMENTE, LE ALTRE FORSE NON SERVONO
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsection
Final System Architecture
\end_layout

\begin_layout Standard
Starting from the class Diagram, at the beginning of the design process
 we had a three tiers client-server based architecture, but the end result
 is a four tiers client based-server architecture.
 Since the modification is quite relevant, is usefull to summarize again
 the high level components, in order to give a clear vision of the system.
 The first tier as usual is the Client tier: Client tier contain all sections
 who interact with the user.
 In this section there are Mobile Application and Web Page.
 The server tier is splitted in two: Web Server and Application server.
 Web server is an efficient solution to connect the Web Page to the application
 server.
 I has a relation of client-Server with application server, where Web server
 is the client.
 Applicatio Server manage all the Power Enjoy logic.
 Is the core of the System and is able to communicate with all components
 as server or client (except for the Web page).
 The persistence tier is filled with the DBMS, designed to exploit microservices
 so the entities will be reasonable divided in more than one storage.
 An other tier, assimilable with the client tier, is the layer of the External
 Services, the one with the Car, Assistance and Payment Service.
 It has a relation Client-Server with the Application server as client and
 collect all Services different from the users who require just an exchange
 of messages with the application server.
 
\end_layout

\begin_layout Subsubsection*
dATABASE MICROSERVICES 
\end_layout

\begin_layout Standard
DBMS will be realized to exploit a microservices architecture.
 The database will be divided into sections, each of them will interacts
 with a specific bin defined in the application server.
 There is a corrispondence between bin and DBMS, each bin interact at most
 with one DBMS Assistnce component rely to an external DBMS managed by the
 assistance service so in the architecture will not appear the Assistance
 DBMS.
 Obviously all DBMS will be connected as in the ER schema.
 A microservices structure will enhance performaces of DBMS, focusing the
 interaction just between the involved components and not questioning every
 time the entire database.
\end_layout

\begin_layout Standard
(img microservices)
\end_layout

\begin_layout Subsubsection*
dATABASE MICROSERVICES 
\end_layout

\begin_layout Itemize
Separating Application Server and the Web Server improves scalability.
 We expect Power Enjoy usage to grow in differents cities and in this way
 we're able to seperate the tasks and optimize each layer individually to
 support increasing loads.
\end_layout

\begin_layout Itemize
The Application Server is the bottleneck of our system.
 Every other components is in relation with it, therefore it's performance
 is stricly related to the performance of our system.
 But since every components expects different functionalities from the Applicati
on Server we can parallelize using threads and split the work load among
 different modules.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsection
Deployment View
\end_layout

\begin_layout Standard
In this subsection we'll move on the physical side of our application, showing
 the deployment diagram for the whole system.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{adjustwidth*}{-4cm}{-4cm}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/Deployment.png
	lyxscale 20
	scale 60

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{adjustwidth*}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsection
Runtime View
\end_layout

\begin_layout Standard
In this section we will describe the dynamic behaviour of the system.
 In particular, it will be shown how the software and logical components
 defined in section 2.3 interact one with another, using sequence diagrams
 for the more meaningful functionalities of the system.
 We decided not to represent the database in the sequence diagram, because
 the interaction with the database is totally abstracted by the entities
 via the Java Persistence API.
\end_layout

\begin_layout Subsubsection*
Create Reservation
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{adjustwidth*}{-4cm}{-4cm}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/runtime/1.startRes.png
	lyxscale 20
	scale 60

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{adjustwidth*}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsubsection*
Cancel Reservation
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{adjustwidth*}{-4cm}{-4cm}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/runtime/2.cancelRes.png
	lyxscale 20
	scale 60

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{adjustwidth*}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsubsection*
Unlock Car
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{adjustwidth*}{-4cm}{-4cm}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/runtime/3.unlock.png
	lyxscale 20
	scale 60

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{adjustwidth*}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsubsection*
Start Ride
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{adjustwidth*}{-4cm}{-4cm}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/runtime/4.startRide.png
	lyxscale 20
	scale 60

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{adjustwidth*}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsubsection*
End Ride (Safe Park)
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{adjustwidth*}{-4cm}{-4cm}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/runtime/5.endSafe.png
	lyxscale 20
	scale 44

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{adjustwidth*}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsubsection*
End Ride (Unsafe Park)
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{adjustwidth*}{-4cm}{-4cm}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/runtime/6.endUnsafe.png
	lyxscale 20
	scale 60

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{adjustwidth*}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Algorithm Design
\end_layout

\begin_layout Standard
Focus of the most relevant algorithmic part: FIND ZONE()
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
UI Design
\end_layout

\begin_layout Subsection
Mobile Application
\end_layout

\begin_layout Standard
The mobile application, as usual, will have a recognizable icon that can
 be added on the desktop.
 When the application is opened, the display will show the login screen.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/mockups/mobile1.png
	lyxscale 20
	scale 35

\end_inset


\end_layout

\begin_layout Standard
\align center
Figure 1: Mockup
\end_layout

\begin_layout Standard
E-mail and Password are required for the login.
 Insert wrong credential cause the refresh of the page with a notification
 explaining the problem, without giving information about the wrong field.
 In this screen is possible to register new Users by the button "REGISTER".
 Clicking leads to the registration screen, it is a form who must be filled
 entirely and correctly to have a successfull regstration.
 The fields must be at least "name", "Surname", "Driving Licence", "E-Mail"
 and "Payment System", add other fields could be halpfull but not strictly
 necessary.
 If some datas are not acceptable, a notification will be displayed and
 the form will be reuploaded.
 After the login, the display show the Main Screen.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/mockups/mobile2.png
	lyxscale 20
	scale 35

\end_inset


\end_layout

\begin_layout Standard
\align center
Figure 1: Mockup
\end_layout

\begin_layout Standard
On the screen is possible to see the map of the city, if is available the
 center will be the user position, if it is not available the center will
 be the center of the city.
 In the upper side there is a men˘ with the sections "Main Men˘", "Select
 Car" and "Payments".
 Main Men˘ open a list of fields.
 It contains the field "Modify Profile" that lead to a screen equal to the
 Registration Screen previously described.
 In the Main Men˘ list is auspicable to put all functionalities not strictly
 related to the reservation and the payment, this will make more clean and
 simple the application.
 Payments allows to pay the unpayed fee, if there is.
 If there are no unpayed fee will be shown a message like "You payed the
 last fee, there is nothing to pay more".
 If there is a payment pending the massage will be "There is a pending payment.
 You have to pay 5Ä (example)." and a button will start the payment procedure.
 Select car is the basic screen of the application.
 In this section is possible to set the center point of research and the
 research range, user should be guided to choose his position as center
 even if is possible to put any position as center of the research.
 When center and range are available for the server, it starts to search
 cars.
 Cars will be shown on the map and user can click on them to see the car
 informations.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/mockups/mobile3.png
	lyxscale 20
	scale 35

\end_inset


\end_layout

\begin_layout Standard
\align center
Figure 1: Mockup
\end_layout

\begin_layout Standard
Informations must be about the battery and the location, could be usefull
 add other information as model and number of sets.
 A button "Reserve Now" will start the reservation.
 When the reservation starts the display will show a one hour countdown,
 the timer indicates the time to the expiration of the reservation.
 An unlock button and a cancel button will be in the screen as well.
 If the unlock button is pushed not near enough, will be dislayed a message
 that notify the problem.
 When the car is ignited the countdown stops and the application go in standby,
 in the logic the application switch from reservation to ride.
 Only the application is in standby, not the entire phone.
 Application will wake up when the car is turned off.
 If the car is in an unsafe area, "You left car in an unsafe area" will
 be displayed togheter wit an unlock button and a one hour countdown.
 At the end of the countdown the ride will end If the car is in a safe area
 the ride will end.
 When a reservation or a ride ends, a payment notification is shown.
 It should be like "Your reservation has ended.
 Your fee is 8Ä.
 Thanks for using Power Enjoy Service".
 A confirmation button allows to go back to the Main Scree.
 The payment message is not shown if the reservation is canceled.
 Is important to underline that on the payment notificatio will NEVER appear
 the word "ride": ride is usefull for the logic but its existence is useless
 for the user, so is usefull to avoid the use of two terms.
 Every time is not specified, the "go back" button of every mobile system
 will accomplish the "go back" function.
\end_layout

\begin_layout Standard
The application must be as simple as possible, the main idea is to make
 every marginal utilities, like the main men˘ options, obscured by the main
 functionality.
 This reasoning increase usability thanks to the focus on the reservation.
\end_layout

\begin_layout Standard
The language to write the application obviously will change from a operating
 system to another.
 The application must run on Android and iOS.
 For Android the language will be Java and for iOS the language will be
 Swift.
\end_layout

\begin_layout Subsection
Web Page
\end_layout

\begin_layout Standard
Web Page is a support of the application.
 The presence of a dowload link should be as constant as possible.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/mockups/web1.png
	lyxscale 20
	scale 35

\end_inset


\end_layout

\begin_layout Standard
\align center
Figure 1: Mockup
\end_layout

\begin_layout Standard
The main purpose of the web page is to give the possibility to the user
 to have a more efficient way to manage side functions.
 The app will focus on the reservations, and the web page allow to have
 a better interface for the options of the main men˘ list.
 The main page is very similar to the access screen of the application and
 the consequences of the buttons are the very same.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/mockups/web2.png
	lyxscale 20
	scale 35

\end_inset


\end_layout

\begin_layout Standard
\align center
Figure 1: Mockup
\end_layout

\begin_layout Standard
On the main page the is a list on the left.
 From the lists fields is easy to manage the profile, from the personal
 information to the history of payments.
 On the main page is also possible to see Power Enjoy Cars distribuited
 on the map.
 This possybility doesn't allow to reserve a car, this is possible only
 via application
\end_layout

\begin_layout Standard
The web page should be written in XML or JSON, to allows quick and efficient
 data transfer through textual data files over HTTPS.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Requirements Traceability
\end_layout

\begin_layout Standard
Explain how requirements defined in the RASD map to the design elements
 that you have definited in this document.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Effort Spent
\end_layout

\begin_layout Standard
Niccolo' 23 Ore 
\end_layout

\end_body
\end_document
