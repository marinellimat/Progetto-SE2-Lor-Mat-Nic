#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Power EnJoy 
\begin_inset Newline newline
\end_inset

Design Document 
\end_layout

\begin_layout Author
Niccolo' Raspa, Matteo Marinelli
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/polimi.png
	scale 60

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\align center
Software Engineering 2 Course Project
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Subsection
Purpose
\end_layout

\begin_layout Standard
This is the Design Document for the Power Enjoy Service.
 It's aim is to provide a functional description of the main architectural
 components, their interfaces and their interactions, together with the
 algorithms to implement and the User Interface Design.
 Using UML standards, this document will show the structure of the system
 and the relationships between the modules.
 This document is written for project managers, developers, testers and
 Quality Assurance.
 It can be used for a structural overview to help maintenance and further
 development.
\end_layout

\begin_layout Subsection
Scope
\end_layout

\begin_layout Standard
PowerEnjoy is a digital management system for a car-sharing service that
 exclusively employs electric cars.
 It allows registered clients (Power Users) to use a vehicle paying only
 on the basis of the actual use during each individual rental.
 For a more detail description of the domain and the requirements please
 refer to the Requirement and Specification Document.
 
\end_layout

\begin_layout Standard
The software system is divided into four layers, which will be presented
 in the document.
 The architecture has to be easily extensible and maintainable in order
 to provide new functionalities.
 Every component must be conveniently thin and must encapsulate a single
 functionality (high cohesion).
 The dependency between components has to be unidirectional and coupling
 must be avoided in order to increase the reusability of the modules.
\end_layout

\begin_layout Standard
Futhermore, to increase cohesion and decoupling as much individual components
 must not include too many unrelated functionalities and reduce interdependencie
s.
\end_layout

\begin_layout Subsection
Definitions, Acronyms, Abbreviation
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
RASD: Requirements Analysis and Specification Document.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
DD: Design Document.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
DBMS: Relational Data Base Management System.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
DB: Database layer,
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
UI: User Interface.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Backend: Term used to identify the Application server.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Frontend: The components which use the application server services (web
 front-end and the mobile applications).
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
SOA: Service Oriented Architecture.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
JDBC: Java DataBase Connectivity.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
JPA: Java Persistence API.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
EJB: Enterprise JavaBean.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
ACID: Atomicity, Consistency, Integrity and Durability.
\end_layout

\begin_layout Subsection
Reference Documents
\end_layout

\begin_layout Standard
This document refers to the following documents:
\end_layout

\begin_layout Itemize
Project rules of the Software Engineering 2 project 
\end_layout

\begin_layout Itemize
Requirement Analysis and Specification Document (from the previous delivery)
\end_layout

\begin_layout Subsection
Document Structure
\end_layout

\begin_layout Standard
This document is structured in five parts: 
\end_layout

\begin_layout Description
Chapter
\begin_inset space \space{}
\end_inset

1:
\begin_inset space \space{}
\end_inset

Introduction.
 This section provides general information about the DD document and the
 system to be developed.
 
\end_layout

\begin_layout Description
Chapter
\begin_inset space \space{}
\end_inset

2:
\begin_inset space \space{}
\end_inset

Architectural
\begin_inset space \space{}
\end_inset

Design.
 This section shows the main components of the systems with their subcomponents
 and their relationships, along with their static and dynamic design.
 This section will also focus on design choices, styles, patterns and paradigms.
\end_layout

\begin_layout Description
Chapter
\begin_inset space \space{}
\end_inset

3:
\begin_inset space \space{}
\end_inset

Algorithm
\begin_inset space \space{}
\end_inset

Design.
 This section will present and discuss the main algorithms for the core
 functions of the system, independently from their concrete implementation.
\end_layout

\begin_layout Description
Chapter
\begin_inset space \space{}
\end_inset

4:
\begin_inset space \space{}
\end_inset

User
\begin_inset space \space{}
\end_inset

Interface
\begin_inset space \space{}
\end_inset

Design.
 This section shows how the user interface will look like and behave, by
 means of concept graphics and UX modeling.
\end_layout

\begin_layout Description
Chapter
\begin_inset space \space{}
\end_inset

5:
\begin_inset space \space{}
\end_inset

Requirements
\begin_inset space \space{}
\end_inset

Traceability This section shows how the requirements in the RASD are satisfied
 by the design choices, and which compontents will implement them.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Architectural Design
\end_layout

\begin_layout Subsection
Overview
\end_layout

\begin_layout Standard
This chapter provides a comprehensive view over the system components, both
 at a physical and at a logical level.
 This description will follow a top-down approach, starting with the description
 of the high-level components and their relations and interactions.
 We will then reason and describe the single components and the functionalities
 they must implement.
 We will especially focus on the components that implement the core logic
 of our application and using sequence diagrams we will describe the runtime
 behaviour of the system.
 
\end_layout

\begin_layout Standard
We will also include deployment diagrams to show the physical implementation
 of the system.
\end_layout

\begin_layout Subsection
High Level Components 
\end_layout

\begin_layout Standard
Before describing the actual system architecture we introduce the high level
 components of our application.
 Following the requirements and the specification listed on the RASD, we
 identify what components are needed in order to implement them and only
 after we have detected them, we will focus on the architecture and explain
 our architectural decision and the technlogies chosen.
 It's important to follow this process to generalize our design as much
 as possibile and abstract from implementation details, in this way we are
 able to describe only the essence of our system.
 
\end_layout

\begin_layout Standard
The main high level components of the system are the following:
\end_layout

\begin_layout Description
Mobile
\begin_inset space \space{}
\end_inset

Application: Power Enjoy is a car sharing service therefore it must be implement
ed with mobility in mind.
 Since the majority of the mobile devices have a GPS module and we need
 to have access to the user position for our application, it makes sense
 to require that the main user has our mobile application installed.
 
\end_layout

\begin_layout Description
Application
\begin_inset space \space{}
\end_inset

Server: This component contains all the logic for the system application.
 It will implement all the required functionalities and communicate both
 with the mobile application and the external services.
 
\end_layout

\begin_layout Description
Web
\begin_inset space \space{}
\end_inset

Server: This component does not contain any application logic, it's used
 to provide a web interface interface to the user.
 It helps to separate presentation from logic.
\end_layout

\begin_layout Description
Web
\begin_inset space \space{}
\end_inset

Browser: Using a web browser the user is able to communicate with the Web
 Server to obtain the required web pages.
 
\end_layout

\begin_layout Description
Database: This components is responsible for data storage and retrieval
 which is crucial for our application.
 It will not implement any logic but it stores all the information needed
 for the correct functioning of our service.
 It must guarantee ACID properties and be accessible from the Application
 Server.
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset

To give a complete overview of the system, we list also the external services
 which are not part of our system but with which the system depends to implement
 some functionalities (please refer to the RASD for a more detailed description).
\end_layout

\begin_layout Standard
High level components which are not part of our system:
\end_layout

\begin_layout Description
Assistance
\begin_inset space \space{}
\end_inset

Service: Power Enjoy is in charge of the management of the car-sharing system.
 All the secondary functionalities (recharging vehicles onsite, bringing
 cars back from unsafe areas and fixing malfunctions) are handled by an
 assistance service.
 This components provides an API to handle all the assistance request.
\end_layout

\begin_layout Description
Payment
\begin_inset space \space{}
\end_inset

Service: Every Power Enjoy user, in order to use our service, is required
 to have an account registered to a third party payment service, with a
 valid payment method.
 This components provides an API to handle all the payments functionalities.
\end_layout

\begin_layout Description
Car
\begin_inset space \space{}
\end_inset

On
\begin_inset space \space{}
\end_inset

Board
\begin_inset space \space{}
\end_inset

System: Every Power Enjoy vehicle comes with a pre-installed on board system
 which registers and notifies all the car activity.
 This components provides an API to monitor and remotly control every vehicle.
\end_layout

\begin_layout Standard
In the figure below we rapresent all the components listed above in a layered
 fashion, highlighting the relations among the different parts: 
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/highlevel.png
	lyxscale 20
	scale 35

\end_inset


\end_layout

\begin_layout Standard
\align center
Figure 1: High Level Components 
\end_layout

\begin_layout Standard
From this diagrams it's important to point out: 
\end_layout

\begin_layout Itemize
This layered rapresentation suggests a four tier architecture
\end_layout

\begin_layout Itemize
Separating Application Server and the Web Server improves scalability.
 We expect Power Enjoy usage to grow in differents cities and in this way
 we're able to seperate the tasks and optimize each layer individually to
 support increasing loads.
\end_layout

\begin_layout Itemize
The Application Server is the bottleneck of our system.
 Every other components is in relation with it, therefore it's performance
 is stricly related to the performance of our system.
 But since every components expects different functionalities from the Applicati
on Server we can parallelize using threads and split the work load among
 different modules.
\end_layout

\begin_layout Subsection
Component View
\end_layout

\begin_layout Standard
In this subsection we will look inside every single component and describe
 all the internal subcomponents.
 It's important to identify the relevant modules without increasing granularity
 to much.
 This will allow to have an efficient load balance in the present and it
 will be easy to integrate new functionalities in the future.
\end_layout

\begin_layout Subsubsection
Application Server
\end_layout

\begin_layout Standard
This component implements the whole logic of the Power Enjoy Application.
 In this subsection we'll explore the subcomponents needed to implement
 all the functionalities specified in the RASD.
 The next figure shows how single functions are logically group in subcomponents.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/application-server.jpg
	lyxscale 30
	scale 30

\end_inset


\end_layout

\begin_layout Standard
Discorsi vari sui perche usare JAVA EE blabla...
\end_layout

\begin_layout Standard
DIAGRAMMA delle componenti con roba di java in mezzo
\end_layout

\begin_layout Subsubsection
Database
\end_layout

\begin_layout Standard
ER DIAGRAM from these tables:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename images/sql_tables.jpg
	lyxscale 20
	scale 30

\end_inset


\end_layout

\begin_layout Standard
Discorsi Vari e poi spiegazione della scelta di MySQL con Java Persistence
 API e diagramma con Entity Beans (Parte alta del class diagram)
\end_layout

\begin_layout Subsubsection
External Services 
\end_layout

\begin_layout Standard
Qualche parola sugli external services 
\end_layout

\begin_layout Subsubsection
Client
\end_layout

\begin_layout Itemize
Spiegazione del perche' mobile-first.
 
\end_layout

\begin_layout Itemize
Spiegazione del perche' aggiungere un webserver 
\end_layout

\begin_layout Itemize
Diagramma della mobile app (con gps ecc...)
\end_layout

\begin_layout Subsection
Deployment View
\end_layout

\begin_layout Standard
In this subsection we'll move on the physical side of our application, describin
g his deployment with the support of UML diagrams.
 
\end_layout

\begin_layout Subsection
Runtime View
\end_layout

\begin_layout Standard
Sequence diagrams to descrive the way componenets interact to accomplish
 specific tasks typically related to your use cases.
\end_layout

\begin_layout Subsection
Component Interfaces
\end_layout

\begin_layout Subsection
Selected Architectural Styles and Pattern
\end_layout

\begin_layout Standard
Explain styles/patterns used and why/how
\end_layout

\begin_layout Subsection
Other Design Decision
\end_layout

\begin_layout Section
Algorithm Design
\end_layout

\begin_layout Standard
Focus of the most relevant algorithmic part
\end_layout

\begin_layout Section
UI Design
\end_layout

\begin_layout Standard
Overview of how the user interace of your system will look like
\end_layout

\begin_layout Section
Requirements Traceability
\end_layout

\begin_layout Standard
Explain how requirements defined in the RASD map to the design elements
 that you have definited in this document
\end_layout

\begin_layout Section
Effort Spent
\end_layout

\begin_layout Standard
Niccolo' 10 Ore 
\end_layout

\end_body
\end_document
