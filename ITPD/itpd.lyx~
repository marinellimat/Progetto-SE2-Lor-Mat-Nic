#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage{changepage}
\usepackage{graphicx}
\end_preamble
\use_default_options true
\begin_modules
logicalmkup
pdfform
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement !tph
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_title "Power Enjoy: Design Document"
\pdf_author "Niccolo' Raspa, Matteo Marinelli"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
Power EnJoy 
\begin_inset Newline newline
\end_inset

Integration Test Plan Document
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{12px}
\end_layout

\end_inset


\end_layout

\begin_layout Author
Niccolo' Raspa, Matteo Marinelli
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace*{20px}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/polimi.png
	scale 60

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{100px}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
Software Engineering 2 Course Project
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Subsection
Revision History
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Version
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Date
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Author(s)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Summary
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
06/01/2016
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Niccolo' Raspa, Matteo Marinelli
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Initial Release
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Purpose and Scope
\end_layout

\begin_layout Standard
This document represents the Integration Testing Plan Document for PowerEnJoy.
 The main purpose of this document is to outline, in a clear and comprehensive
 way, the main aspects concerning the organization of the integration testing
 activity for all the components that make up the system.
 
\end_layout

\begin_layout Standard
This process is essential because it not only guarantees that every component
 behaves as expected but also that all the components interoperate correctly
 together to fullfil all the functionalities expected from the system.
 
\end_layout

\begin_layout Standard
We will focus deeply on the Application Layer since it implements all the
 core of our business.
 This component is divided in different services which provides great benefits
 but the implicit granularity of a service oriented approach must be fully
 tested to guarantee that all the subcomponents behave as one cohesive layer.
\end_layout

\begin_layout Paragraph
This document is structured as follows:
\end_layout

\begin_layout Description
Chapter
\begin_inset space \space{}
\end_inset

1 Provides general information about the ITPD document.
\end_layout

\begin_layout Description
Chapter
\begin_inset space \space{}
\end_inset

2 Explains in details the chosen integration strategy.
 In more details:
\end_layout

\begin_layout Itemize
Lists of the subsystems and their subcomponents involved in this process
\end_layout

\begin_layout Itemize
Specifies the criteria that must be met before integration testing begins
\end_layout

\begin_layout Itemize
Describes the integration testing approach and the rationale behind it 
\end_layout

\begin_layout Itemize
Outlines the order in which components and subcomponents will be integrated
\end_layout

\begin_layout Description
Chapter
\begin_inset space \space{}
\end_inset

3 Describes the type of tests that will be used to verify that every step
 of the integration process above perform as expected.
\end_layout

\begin_layout Description
Chapter
\begin_inset space \space{}
\end_inset

4 Identifies all tools and test equipment needed to accomplish the integration.
 
\end_layout

\begin_layout Description
Chapter
\begin_inset space \space{}
\end_inset

5 Identifies any program stubs or special test data required for each integratio
n step
\end_layout

\begin_layout Subsection
List of Definitions and Abbreviations
\end_layout

\begin_layout Description
DD: Design Document
\end_layout

\begin_layout Description
RASD: Requirement Analysis and Specification Document
\end_layout

\begin_layout Description
ITPD: Integration Test Plan Document
\end_layout

\begin_layout Description
EJB: Enterprise JavaBeans
\end_layout

\begin_layout Description
SOA: Service Oriented Architecture
\end_layout

\begin_layout Description
Component: One of the four tier of the system (Client, Web, Application,
 Database)
\end_layout

\begin_layout Description
Subcomponent: Usually refers to the Application Layer, and refers to a EJB
 that encapsulates a specific part of the business logic of the module
\end_layout

\begin_layout Description
Layer: synonim of 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
Component
\end_layout

\end_inset


\end_layout

\begin_layout Description
Service: synonim of
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
 Subcomponent
\end_layout

\end_inset


\end_layout

\begin_layout Description
Power
\begin_inset space \space{}
\end_inset

User: Registered user of the application
\end_layout

\begin_layout Description
External
\begin_inset space \space{}
\end_inset

System: Refers to third party systems used in the Power EnJoy application
 (Payment System, Assistance System, Car-On-Board System)
\end_layout

\begin_layout Subsection
List of Reference Documents
\end_layout

\begin_layout Standard
Please refer to the following documents, for additional informations on
 the Power Enjoy System:
\end_layout

\begin_layout Itemize
Project rules of the Software Engineering 2 project
\end_layout

\begin_layout Itemize
Power Enjoy - Requirement Analysis and Specification Document 
\end_layout

\begin_layout Itemize
Power Enjoy - Design Document 
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Integration Strategy
\end_layout

\begin_layout Subsection
Entry Criteria
\end_layout

\begin_layout Standard
This section describes the prerequisites that need to be met before integration
 testing can be started.
\end_layout

\begin_layout Paragraph
Stakeholder Approval 
\end_layout

\begin_layout Standard
First of all, the Requirements Analysis and Specification Document and the
 Design Document must have been presented to the stakeholders for approval
 even before the coding phase can begin, this will ensure that they're satisfied
 with the development.
\end_layout

\begin_layout Paragraph*
Website and Mobile App
\end_layout

\begin_layout Standard
The presentation layer to the user might not be completed but communication
 between the Application Server and Clients, both via the Mobile App and
 via the Web Server, must have clearly structured and coded via RESTful
 APIs using JAX-RS.
\end_layout

\begin_layout Paragraph*
Coding and Testing Application Layer
\end_layout

\begin_layout Itemize
All the classes and methods of the main Entity Beans must be coded and must
 pass thorough 
\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Unit tests
\end_layout

\end_inset

.
 Unit tests should have a minimum coverage of 90% of the lines of code and
 should be run automatically at each build using JUnit.
 (non necessariamente tutte, ma quelle piu importanti prima ed eventualmente
 simulare le altre durante il testing)
\end_layout

\begin_layout Itemize
\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Code inspection
\end_layout

\end_inset

 has to be performed on all the code in order to ensure maintainability,
 respect of conventions and find possible issues which could increase the
 testers’ effort in next testing phases.
 Code inspection should be performed using automated tools when possible.
\end_layout

\begin_layout Itemize
\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Documentation
\end_layout

\end_inset

 of all classes and functions should be well written using JavaDoc.
 The public interfaces of each Entity Bean shoud be clearly stated.
\end_layout

\begin_layout Itemize
\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Object relational mapping
\end_layout

\end_inset

 of each service to its corresponding database should be implemented with
 automated tools to avoid errors (such as Hibernate) and fully tested.
\end_layout

\begin_layout Subsection
Elements to be Integrated
\end_layout

\begin_layout Standard
In this section we’re going to provide a list of all the components that
 need to be integrated together.
 The figure below corrispond to the system architecture already discussed
 in the Design Document.
 
\end_layout

\begin_layout Standard
The system is built upon the interactions of many tiers, each one implementing
 a specific set of functionalities.
 Every tier is also obtained by the combination of several lower-level component
s.
 This modularity causes that the integration phase will involve the integration
 of components at different levels of abstraction.
 In addition our system is in relation with External Systems, which are
 crucial for our application to work.
 It's important that they're correctly integrated to the system in a way
 in which everything is trasparent to the user.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename images/CompletedArchitecture.png
	lyxscale 20
	scale 40

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace*{20px}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In summary, the elements to integrate are:
\end_layout

\begin_layout Enumerate
Integration of the different services inside the Application Layer.
\end_layout

\begin_layout Enumerate
Integration of different tiers (Client - Web - Application)
\end_layout

\begin_layout Enumerate
Integration and configuration with third party systems (Payment System,
 Assistance System)
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsection
Integration Testing Strategy
\end_layout

\begin_layout Standard
The approach we’re going to use to perform integration testing is based
 on a mixture of the bottom-up and functional-grouping integration strategies.
 This choice is due to the fact that if the entry criteria is met, it's
 reasonable to assume that we have different small services, indipendent
 from one other, that implement correctly a small part of the application
 logic and by integrating them we're able to create a more and more complex
 system that will eventually satisfy all the requirements.
 In a pure bottom-up strategy we would start from the lowest layers of the
 system, testing the basic functionalities, then moving forward the most
 abstract layers but in our case this approach would be unefficient.
 Since every service is dedicated to one part of the business logic we can
 parallelize this testing, focusing on different logic groups at the same
 time, giving more priority to the critical components first and then integratin
g secondary functionalities.
 Moreover, we also need to keep in mind that we're dealing with external
 systems and if we discover some bugs or problems on their side, fixes might
 take time and this would create a time gap in which we're not able to move
 the integration forward.
\end_layout

\begin_layout Standard
For all these reasons we believe that the best integration strategy is the
 following:
\end_layout

\begin_layout Paragraph
PHASE 1: Assure that services in relations with external systems works as
 expected.
 
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
As stated earlier, in order to avoid wasting time we start from the boundary
 of the system.
 This process should be fairly quick if everything was implemented as mutually
 agreed and should immediatly discover issues that we can notify early on
 to external parties.
 In this phase we'll test the communication between
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
 Assistance Service - Assistance System
\end_layout

\end_inset

 and 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
Payment Service - Payment System
\end_layout

\end_inset

.
\end_layout

\begin_layout Paragraph
PHASE 2: Assure that we have control over the Car 
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
This phase is similar to the previous, and can be carried in parallel.
 In this phase we're also in relation with an external system which is the
 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
Car On Board System
\end_layout

\end_inset

 but due to the relevance of this process we've decided to outline it and
 dedicated a whole phase.
 We can't move the integration forward if we're lacking the foundations.
 In a digital management system for a car-sharing service the control over
 the car must be treated as a first class citizen.
 This will avoid a big bang scenario, where we have implemented high level
 functionalities that not reflect the concrete situation of the car in the
 real world.
 These two inital phases will also allow us to 
\begin_inset Quotes eld
\end_inset

forget
\begin_inset Quotes erd
\end_inset

 of external systems in the next phases, and only focus on the relation
 among different services.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Paragraph
PHASE 3: Integration of Services 
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
In this part the bottom-up approach would be used to build complex functionaliti
es integrating different services.
 Since subsystems are fairly independent from one another, the order in
 which they’re integrated together to obtain the full system follows the
 critical-module-first approach.
 This strategy allows us to concentrate our testing efforts on the riskiest
 components first that represent the core functionalities of the whole system.
 By proceeding this way, we are able to discover bugs earlier in the integration
 progress and take the necessary measures to correct them on time.
\end_layout

\begin_layout Standard
The most critical service to integrate is the 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
Reservation Component
\end_layout

\end_inset

 which manages all active reservation made by Power Users, we will ensure
 that it integrates correctly both with the 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
Location Component
\end_layout

\end_inset

 and the 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
Car Service
\end_layout

\end_inset

.
 This will ensure that we have a stable prototype of the actual software
 that implements the core functionalities.
 From this prototype we will spread like wildfire, integrating other Components
 that implements all the other functionalities.
\end_layout

\begin_layout Standard
In this phase, it is only necessary to use drivers to simulate the top layers
 during the testing, which are a lot easier to produce than stubs.
 
\end_layout

\begin_layout Paragraph
PHASE 4: Integration with top layers 
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
In this phase we will remove the drivers and connect the Application Side
 to the top tiers.
 We must ensure that the Application Layer works with real inputs from the
 
\begin_inset Quotes eld
\end_inset

external word
\begin_inset Quotes erd
\end_inset

 and not only in a simulated and controlled environment.
 The integration should proceed smoothly since the communication via RESTful
 APIs was clearly structured at the beginning of the integration but we
 should focus deeply on errors and expection handling.
\end_layout

\begin_layout Paragraph
PHASE 5: Alpha Test
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
In this phase we'll test the Power Enjoy System as a whole.
 This phase will provide a confirmation of the correctness of the integration
 process and will ensure that we haven't overlooked possible error scenarios.
\end_layout

\begin_layout Subsection
Sequence of Component/Function Integration
\end_layout

\begin_layout Subsubsection
Software Integration Sequence
\end_layout

\begin_layout Standard
In this section we’re going to formalize the order of integration (and integrati
on testing) of the various components and subsystems presented in the previous
 section.
 Before describing this process, we will clarify the notation used.
 In the figures we will refer to an Entity Java Bean contained in the applicatio
n layer as a 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
<<service>>
\end_layout

\end_inset

 , we will use 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
<<component>>
\end_layout

\end_inset

 to refer to a layer (subsystem) of the Power EnJoy Application and 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
<<external system>>
\end_layout

\end_inset

to refer to External Systems (Payment System, Assistance System, Car-on-Board
 System).
 Elements that will be simulated during the integration process will be
 placed inside a dashed line box.
\end_layout

\begin_layout Subsubsection*
External Systems
\end_layout

\begin_layout Paragraph*
Payment 
\end_layout

\begin_layout Standard
The first two elements to be integrated are the 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
Payment Service
\end_layout

\end_inset

 and the
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
 Payment System
\end_layout

\end_inset

.
 As explained above, it is important to start from the external systems
 in order to signal any problems that involve third party software or APIs.
 In this step we test if we're able to check if a user has a registered
 account in the third payment system, regular payment functionalities (sending
 a payment request, receiving payment confirmation) and the correct management
 of payment logs.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/1payment.png
	scale 70

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph*
Assistance
\end_layout

\begin_layout Standard
The second step in the integration process is to integrate the other external
 system, the 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
Assistance System
\end_layout

\end_inset

, for the same reasons mentioned above.
 The latter has less priority because it's reasonable to assume that we
 have more control over the Assistance System, since it's part of the company.
 In this step we test if we're able to request assistance and receive the
 confirmation when services are rendered.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/2Assistance.png
	scale 70

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph*
Car On Board System
\end_layout

\begin_layout Standard
The last system to integrate is the Car on Board System.
 In this step will make sure that the system itself works (correctly detects
 car events such as door opening and closing, engine starting, ecc...) but
 also that we're able to detect this events from inside our software and
 controlling remotly the vehicle.
 In this way, all the other services will only use the interface provided
 by the 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
Car Service
\end_layout

\end_inset

 forgetting about the actual Car on Board System.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/3Car.png
	scale 70

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Reservation
\end_layout

\begin_layout Standard
After making sure the boundaries of our system work correctly, the next
 step in the integration process is to appropriately connect the services
 that implement the reservation functionality.
 This choice comes from the critical-module-first approach, because in a
 car sharing service being able to reserve a car is the most important functiona
lity.
 As said before, it was not implemented first to avoid a big bang scenario,
 where we have implemented high level functionalities that not reflect the
 concrete situation of the car in the real world.
 
\end_layout

\begin_layout Standard
Using a bottom-up approach, we are going to show which services must be
 integrated together in order to implement this functionality.
\end_layout

\begin_layout Paragraph
Location of Cars 
\end_layout

\begin_layout Standard
First, we proceed by integrating the 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
Car Service
\end_layout

\end_inset

 with the 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
Location Service
\end_layout

\end_inset

.
 We test if the location is correctly detected, if we're able to monitor
 the car during a ride and if we're able to correctly detect a safe or an
 unsafe park.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/4locationCar.png
	scale 70

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Location of Power Users 
\end_layout

\begin_layout Standard
Second, we integrate the location of user by simulating reservation request
 from a user via Mobile App.
 As a remainder, our system is mobile-first and the reservation of a vehicle
 is only possibile via a mobile device, this allows us to reduce the scope
 of the testing and forget about the web services which we'll be integrated
 later.
 In this step we test the 
\begin_inset Quotes eld
\end_inset

Select Car
\begin_inset Quotes erd
\end_inset

 use case (please refer to the RASD for more details) in which the user
 selects a car on the map given an address or a (simulated) user position
 and a range, the system performs the GridSearch Algorithm (please refer
 to DD for more details on the implementation) and returns the list of available
 cars.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/5locationUser.png
	scale 70

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Start/Cancel Reservation 
\end_layout

\begin_layout Standard
Finally, we have built all the necessary functionalities and we're able
 to test the registration functionality.
 We integrate the 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
Reservation Service
\end_layout

\end_inset

 with the 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
Location Service
\end_layout

\end_inset

 and the 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
Car Service
\end_layout

\end_inset

.
 In this step we test if a Power User can successfully reserve a car, unreserve
 a car (without the 1hour limit for now) and can request to unlock the car
 (with proximity check).
 The user input is still simulated.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/6Reservation.png
	scale 70

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Driving and Ending Reservation 
\end_layout

\begin_layout Standard
To complete the reservation functionality we don't need to integrate any
 but we need to make sure that the prototype of the system performs all
 the actions required to stop the reservation.
 In this step we test that the engine ignition triggers an active reservation
 and that a reservation immediately stops as soon as a car is parked and
 locked (both in a Safe/Unsafe Area for now).
\end_layout

\begin_layout Subsubsection*
Other functionalities 
\end_layout

\begin_layout Standard
Now that we have a stable prototype of the Power Enjoy Application we will
 spread like wildfire, integrating other services that implements all the
 other functionalities.
\end_layout

\begin_layout Paragraph
Timing
\end_layout

\begin_layout Standard
Our prototype doesn't consider the timing constraint that the reservation
 imposes.
 Moreover, we need to incorporate the following constrains:
\end_layout

\begin_layout Enumerate
A Power User has 1 hour to request to unlock a vehicle once he/she has reserved
 it
\end_layout

\begin_layout Enumerate
A reserved car parked in an Unsafe Area, triggers a one hour countdown in
 which the user needs to go back to the car to move it on a Safe Area.
 As soon as the countdown expires the reservation expires as well.
 The car is set unavailable and the Power User is charged for the extra
 time as a refund for moving the car back in a Safe Area.
 
\end_layout

\begin_layout Standard
In this step we integrate these functionalities, adding the
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
 Timing Service
\end_layout

\end_inset

 to the prototype.
 In later figures this component we will be hidden for clarity, but a timer
 icon will be added to the Reservation Service as a remainder.
 We will test that countdown expiration causes the reservation to end and
 that a user requesting to unlock a vehicle stops the timer (both for case
 1 and case 2)
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/7timing.png
	scale 70

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Payment
\end_layout

\begin_layout Standard
In this step we start moving towards the boundaries of our system.
 We include the payment functionalities adding the 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
Payment Service
\end_layout

\end_inset

 to the prototype.
 We test that the end of a Reservation (in any case) triggers a payment
 request.
 
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{adjustwidth*}{-0cm}{-3cm}
\end_layout

\end_inset


\begin_inset Graphics
	filename images/8payment.png
	scale 60

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{adjustwidth*}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
User & Profile Management 
\end_layout

\begin_layout Standard
So far in the integration progress we have assumed that a simulated User
 was already registered to the Power Enjoy System, logged and always allowed
 to reserve a car.
 Now it's time to introduce this additional checks and functionalities integrati
ng the 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
User Service
\end_layout

\end_inset

.
 The new features to test involve:
\end_layout

\begin_layout Enumerate
Login and Registering 
\end_layout

\begin_layout Enumerate
Temporary Ban a Power User if it has a payment pending
\end_layout

\begin_layout Enumerate
Unban as soon as a payment request is recieved 
\end_layout

\begin_layout Enumerate
Editing Profile Info 
\end_layout

\begin_layout Enumerate
Request Logs (Reservations, Payments)
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/9User.png
	scale 60

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Assistance
\end_layout

\begin_layout Standard
In this step we integrate the last componen of the Business tier, the 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
Assistance Service 
\end_layout

\end_inset

.
 We test that a malfunctioning event detected from the 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
Car Service 
\end_layout

\end_inset

triggers and assistance request and the termination of the reservation.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{adjustwidth*}{-3cm}{-3cm}
\end_layout

\end_inset


\begin_inset Graphics
	filename images/10Assistance.png
	scale 60

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{adjustwidth*}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Subsystem Integration Sequence
\end_layout

\begin_layout Standard
Our prototype is working with the top layers simulated.
 Now it's ready to integrate the real tiers into the system.
 We can split the integration between the two parts: the web part and the
 mobile part.
 We first integrate the Web Part because it uses all parts of the prototype
 already tested for the mobile and then the mobile should be straightforward
 if the simulated mobile app was implemented mirroring the real app.
\end_layout

\begin_layout Subsubsection*
Web Subsystem 
\end_layout

\begin_layout Standard
In this step we need to make sure that all the functionalities expected
 from the Website (Profile Management, Car Lookup and Payments) works accordingl
y.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/11Web.png
	scale 60

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Complete System
\end_layout

\begin_layout Standard
Integrating the mobile application we're ready to deploy and test the entire
 system.
 In this phase we should perform an alpha test and check that a client can
 successfully make a reservation from start to finish.
 Different scenario might occur in a real non-simulated environment so it's
 important to make sure that we haven't overlooked any plausible situation
 that might cause unexpected behaviour of the system.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename images/CompletedArchitecture.png
	lyxscale 20
	scale 40

\end_inset


\end_layout

\begin_layout Section
Individual Steps and Test Description
\end_layout

\begin_layout Standard
This chapter describes the individual test cases to be executed.
 Test cases are identified by a code, test cases whose code starts with
 SI are integration tests between subsystems; test cases whose code starts
 with I are integration tests between components.
\end_layout

\begin_layout Standard
The Database integration test and all related tests are not present because
 our application is composed of microservices, each one with its own DBMS,
 which is strictly related to the functionality expected from that component
 .
 The tests of the single databases and of the object relational mapping
 were performed during the individual componenet testing stage (which is
 not part of this document).
\end_layout

\begin_layout Subsection
I1
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features booktabs="true" tabularvalignment="middle" tabularwidth="60page%">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top" width="40page%">
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Test Items
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Payment Service –> Payment System
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Input Specification
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Messages who identify the user (existing in the Payment System Database)
 to charge.
 Informations about the amount to pay.
 Tipical values could be existing/unexisting users, random amount to pay,
 also over the user's disponibility.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Output Specification
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
User to charge is find or not.
 Payment has happend or not.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Enviromental Needs
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Payment Service Driver and Payment System Mock
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Test Description
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A invoice is sended to Payment Service.
 It will contact the Payment System in order to charge the user.
 Payment System will respond with the result (positive or negative) of the
 charging operaction.
 The test must check the behaviour of the Paiment System according to the
 informations received.
 Crucial points are the existance of the user, the possibility to pay and
 the return of the result.
 Is also to test the correct ban of the user with a payment pending and
 the relative unban when a payment notification arrive from the Payment
 System
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Testing Method
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Automated with JUnit and Mockito
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
I2
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features booktabs="true" tabularvalignment="middle" tabularwidth="60page%">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top" width="40page%">
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Test Items
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Assistance Service –> Assistance System
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Input Specification
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Information about malfuncioning cars and malfunctioning type
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Output Specification
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Notification of completed assistance
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Enviromental Needs
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Assistance Service Driver and Assistance System Mock
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Test Description
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Is simulated a malfunciotioning car status.
 The test wants to check the correct exchange of messages between Assistance
 Service and Assistance System.
 Assistance Service must also notify the solution of malfunctioning to the
 Car Service.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Testing Method
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Automated with JUnit and Mockito
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
I3
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features booktabs="true" tabularvalignment="middle" tabularwidth="60page%">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top" width="40page%">
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Test Items
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Car Service –> Car on Board System
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Input Specification
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
All car status change provided by the Application Server
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Output Specification
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
All car status provided by the car interacting with real world (user).
 Cmmunication of information to produce an invoice and the position.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Enviromental Needs
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Car Service Driver and Car on Board System Mock
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Test Description
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A complete Reservation is simulated.
 The test must ceck that the interaction between Car Service and Car on
 Board System is correct.
 The Remote Control must correctly lock and unlock the car when requested.
 When an ignition is simulated, it will be detected by the Car on Board
 System and notified to Car service; the same for malfunctioning and Charging
 state.
 If is simulated the presence of passengers, the Car on Board System must
 correctly calculate the Shared Ride time and send it to Car Service.
 The Car on Board System must also be able to calculate the Ride Length
 when the reservation simulation ends and send it to Car Service.
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Testing Method
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Automated with JUnit and Mockito
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
I4
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features booktabs="true" tabularvalignment="middle" tabularwidth="60page%">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top" width="40page%">
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Test Items
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Location Service –> Car Service
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Input Specification
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Position of the cars.
 Safe/Unsafe Park.
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Output Specification
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Position Updates
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Enviromental Needs
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Location Service Driver and Car Service Driver
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Test Description
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Test must check that Location Service can give an updated postition to all
 cars and can register all update communicated by Car Service.
 The location grind must be tested as well, so a car selection must be simulated
 in order to check if the location grid correctly shows the most convnient
 available cars.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Testing Method
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Automated with JUnit
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
I5
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features booktabs="true" tabularvalignment="middle" tabularwidth="60page%">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top" width="40page%">
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Test Items
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Mobile App –> Location Service, Car Service
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Input Specification
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Request of selection of a car.
 User position (GPS) or an address
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Output Specification
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
List of suggested available cars, if no cars are available the output is
 a notification.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Enviromental Needs
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Mobile Application mock and I4
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Test Description
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A request of a car is performed on the app.
 The test must check that a the output is correct according to the input
 and the cars disposition
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Testing Method
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Automated with JUnit and Mockito
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
I6
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features booktabs="true" tabularvalignment="middle" tabularwidth="60page%">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top" width="40page%">
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Test Items
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Reservation Service –> Mobile App, Location Service, Car Service
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Input Specification
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Selection of a car (start of the reservation).
 Reservation canceled.
 Unlock request.
 Car Ignition notification.
 Position notification at the end of the reservation.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Output Specification
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unlock successfull or denied.
 Start ride notification.
 Ending sequence.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Enviromental Needs
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Reservation Service Driver and I5
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Test Description
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Is simulated a Reservation from the very beginning.
 Test must perform the reservation starting with the car selection and proceed
 with every step till the end (payment excluded).
 All possible situations must be simulated in order to verify the correct
 behaviour and return of the system.
 Remember to verify the reservation cancellation (not the expiration, it
 will be tested in the next test), park in a non safe area is not considered.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Testing Method
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Automated with JUnit and Mockito
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
I7
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features booktabs="true" tabularvalignment="middle" tabularwidth="60page%">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top" width="40page%">
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Test Items
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Payment Service, Timer Service –> Mobile App, Location Service, Car Service,
 Reservation Service
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Input Specification
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Timer Service: Selection of a car (start of the reservation).
 Reservation canceled.
 Car Ignition notification Payment Service: Invoice.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Output Specification
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Timer Service: Time to expiration.
 Payment Service: Ban/Unban user with pending payment.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Enviromental Needs
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Car Service Driver Timer Driver, I6 and I1.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Test Description
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A reservation is simulated.
 In this test is important to check the correct management of the expiration
 time by the Timer Service in case of waiting of an ignition and in case
 of park in a non safe area.
 The System must also corretly send the invoices when the time expire or
 the reservation end.
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Testing Method
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Automated with JUnit and Mockito
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
I8
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features booktabs="true" tabularvalignment="middle" tabularwidth="60page%">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top" width="40page%">
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Test Items
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Payment Service, User Service, Location Service
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Input Specification
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Informations about the user, ban/unban updates, Location Updates.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Output Specification
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Result of profile modification.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Enviromental Needs
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Payment Service Driver, User Service Driver, Location Driver and Web Application
 and Server mock
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Test Description
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
In this test must be performed the profile managemet.
 Check the behaviour of the system inserting both possible and unpossible
 values.
 Both Login and Profile Modification must be tested in this section.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Testing Method
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Automated with JUnit and Mockito
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
I9
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features booktabs="true" tabularvalignment="middle" tabularwidth="60page%">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top" width="40page%">
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Test Items
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Web Application, Web Server –>Payment Service, User Service, Location Service
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Input Specification
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Informations about the user, ban/unban updates, Location Updates.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Output Specification
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Result of profile modification.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Enviromental Needs
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SI1 and Web Application and Server completed
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Test Description
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
In this test must be performed the profile managemet.
 Check the behaviour of the system inserting both possible and unpossible
 values.
 Both Login and Profile Modification must be tested in this section.
 This time no components are simulated.
 Since the Web Application is not simulated, must be tested also the web
 interface and its correct behaviour.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Testing Method
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Automated with JUnit and manual testing (all combination of OS-Browser)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
I10
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features booktabs="true" tabularvalignment="middle" tabularwidth="60page%">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top" width="40page%">
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Test Items
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
All Services (Top Layer Simulated)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Input Specification
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
All methods invoked by a simulated mobile application
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Output Specification
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Visual notification to inform the user about any usefull state or modification
 in the system.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Enviromental Needs
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
I1, I2, I3, I7 and Mobile Application Mock
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Test Description
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Complete simulation of all functionalities of the Application.
 Perform test on every kind of users, registered or not, banned or unbanned.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Testing Method
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Automated with JUnit and Mockito
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
I11
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features booktabs="true" tabularvalignment="middle" tabularwidth="60page%">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top" width="40page%">
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Test Items
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
All Services (no simulated layers)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Input Specification
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
All methods invoked by a simulated mobile application
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Output Specification
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Visual notification to inform the user about any usefull state or modification
 in the system.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Enviromental Needs
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SI3 and Mobile Application
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Test Description
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Complete simulation of all functionalities of the Application.
 Perform test on every kind of users, registered or not, banned or unbanned.
 Since no layer are simulated, chec the correc behaviour of the application
 on every device (IOs and Android), check that the visual presentation is
 also correct.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Testing Method
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Automated with JUnit and manual testing (IOs and Android)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
Tools and Test Equipment Required
\end_layout

\begin_layout Standard
\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Identify all tools and test equipment needed to accomplish the integration.
 Refer to the tools presented during the lectures.
 Explain why and how you are going to use them.
 Note that you may also use manual testing for some part.
 Consider manual testing as one of the possible tools you have available.
\end_layout

\end_inset


\end_layout

\begin_layout Description
Manual
\begin_inset space \space{}
\end_inset

Testing On Board Computer: The most frequent interaction is between the
 Application server and the On Board Computer in cars.
 Is fundamental to simulate reservations in order to control the absence
 of malfunctioning or errors in the interaction.
 The test will cover all the possible situations that may happen during
 a rent: reservation, cancel reservation, start the ride, end the ride,
 park in a non safe area, ecc…
\end_layout

\begin_layout Description
JUnit Before integration testing, tests on single components is necessary.
 This first part of testing is not covered in this document.
 Anyway, the main issue is to check the absence of bugs and problem in each
 part of the system, from the application to the all the Application Server
 components.
 We choose JUnit to perform the components test basically because is the
 most used framework for this specific; totally java dedicated, it combines
 perfectly itself with the implementation choices described in the Design
 Document and with the integration testing framework Arquillian.
 In particular, we are going to use it in order to verify that the correct
 objects are returned after a method invocation, that appropriate exceptions
 are raised when invalid parameters are passed to a method and other issues
 that may arise when components interact with each other.
 
\end_layout

\begin_layout Description
Mockito Mockito is an open-source test framework useful to generate mock
 objects, stubs and drivers.
 Since the entire system interacts with external and real objects, is necessary
 to use a framework to reproduce this kind of entities.
 In unit testing, mock objects can simulate the behavior of complex, real
 objects: they are useful when a real object is impractical or impossible
 to incorporate into a unit test.
 They are also useful for the developers, who have to focus their tests
 on the behavior of the system without worrying about its dependencies and
 having predictable results.
\end_layout

\begin_layout Description
Arquillian Arquillian is an integration testing framework for business objects
 that are executed inside a container or that interact with the container
 as a client.
 Our choice falls on it because is widely used, in particular makes simple
 the kind of testing we need, since we have different components grouped
 inside one big application server.
 Arquillian also integrates perfectly with JUnit, used in the single components
 testing phase.
 It combines a unit testing framework (JUnit), and one or more sup- ported
 target containers (Java EE container, etc) to provide a simple, flexible
 and pluggable integration testing environment.
 Arquillian makes integration testing no more difficult than the beans testing.
 Specifically, we are going to use Arquillian to verify that the right component
s are injected when dependency injection is specified, that the connections
 with the database are properly managed and similar containerlevel tests.
\end_layout

\begin_layout Description
Devices The application run on two types of operative systems (Android and
 IOs).
 This fact make necessary testing on the direct tools that allow users to
 exploit power enjoy system.
 Power Enjoy service was tested on two groups of mobile devices (non necessarly
 phones), one for each type of operative system.
 Web page is available on the web and a group of computers were used to
 test the page.
 Test were made on every combination of Operative system and browser.
\end_layout

\begin_layout Section
Program Stubs and Test Data Required
\end_layout

\begin_layout Standard
In order to perform integration testing without having developed the entire
 system first, we need to use stubs and drivers to simulate the software
 components that still donít exist and test the others.
\end_layout

\begin_layout Subsection
Drivers
\end_layout

\begin_layout Paragraph
Data Access Driver
\end_layout

\begin_layout Standard
This testing module will invoke methods in order to test interaction between
 DBMSs and Application Server's beans.
 Since the Power Enjoy is structured in microservices, bin has access at
 most to on specific DBMS.
 This driver manages all the interaction of this kind, for all bins.
\end_layout

\begin_layout Paragraph
Reservation Service Driver 
\end_layout

\begin_layout Standard
this testing module will invoke the methods visible to the Reservation Service
 subcomponent, in order to test its interaction with the Reservation database,
 the User service, the Car Service and the Payment Service components.
\end_layout

\begin_layout Paragraph
User Service Driver
\end_layout

\begin_layout Standard
this testing module will invoke the methods visible to the User Service
 subcomponent, in order to test its interaction with the User database,
 the Reservation service, the Location Service and the Payment Service component
s.
\end_layout

\begin_layout Paragraph
Car Service Driver
\end_layout

\begin_layout Standard
this testing module will invoke the methods visible to the Car Service subcompon
ent, in order to test its interaction with the Car database, the Reservation
 service, the Location Service and the Assistaance Service components.
\end_layout

\begin_layout Paragraph
Location Service Driver
\end_layout

\begin_layout Standard
this testing module will invoke the methods visible to the Location Service
 subcomponent, in order to test its interaction with the Location database,
 the User service and the Car Service.
\end_layout

\begin_layout Paragraph
Assistance Service Driver
\end_layout

\begin_layout Standard
this testing module will invoke the methods visible to the Assistance Service
 subcomponent, in order to test its interaction with the Car Service component.
\end_layout

\begin_layout Paragraph
Payment Service Driver 
\end_layout

\begin_layout Standard
this testing module will invoke the methods visible to the Payment Service
 subcomponent, in order to test its interaction with the Payment database,
 the Reservation service and the User Service components.
\end_layout

\begin_layout Subsection
Stubs
\end_layout

\begin_layout Standard
Since we used a mixed approach, not purely bottom-up, stubs are necessary
 to emulate the presence of not yet completed components.
 A test DBMS must be filled with random values in order to test properly
 the Software.
 Each entity must appear in the test DBMS following the same ER diagram
 designed in the Design Document.
 Could be usefull to insert values may cause exceptions, to check the behaviour
 of the system on limit situations.
 Other stubs must reproduce the behaviour of external systems that interact
 with the Power Enjoy software.
 Must be emulated the communication between Payment System, Assistance System
 and Car On Board System with the respective bins.
 The test must evaluate also the efficiency of the user actions.
 Will be usefull a Mock sender and receiver in order to collect all data
 of an immaginary user.
 A set of datas choosen ad hoc (also not real ones) is necessary to verify
 the validity of the credential.
\end_layout

\begin_layout Section
Effort Spent
\end_layout

\begin_layout Standard
The approximate number of hours of work for each member of the group is
 the following: 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Niccolo’
\begin_inset space \space{}
\end_inset

Raspa 5 Hours
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Matteo
\begin_inset space \space{}
\end_inset

Marinelli y Hours
\end_layout

\end_body
\end_document
