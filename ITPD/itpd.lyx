#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage{changepage}
\end_preamble
\use_default_options true
\begin_modules
logicalmkup
pdfform
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement !tph
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_title "Power Enjoy: Design Document"
\pdf_author "Niccolo' Raspa, Matteo Marinelli"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
Power EnJoy 
\begin_inset Newline newline
\end_inset

Integration Test Plan Document
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{12px}
\end_layout

\end_inset


\end_layout

\begin_layout Author
Niccolo' Raspa, Matteo Marinelli
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace*{20px}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename ../DD/images/polimi.png
	scale 60

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{100px}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
Software Engineering 2 Course Project
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Subsection
Revision History
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Version
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Date
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Author(s)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Summary
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
06/01/2016
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Niccolo' Raspa, Matteo Marinelli
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Initial Release
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Purpose and Scope
\end_layout

\begin_layout Standard
This document represents the Integration Testing Plan Document for PowerEnJoy.
 The main purpose of this document is to outline, in a clear and comprehensive
 way, the main aspects concerning the organization of the integration testing
 activity for all the components that make up the system.
 
\end_layout

\begin_layout Standard
This process is essential because it not only guarantees that every component
 behaves as expected but also that all the components interoperate correctly
 together to fullfil all the functionalities expected from the system.
 
\end_layout

\begin_layout Standard
We will focus deeply on the Application Layer since it implements all the
 core of our business.
 This component is divided in different services which provides great benefits
 but the implicit granularity of a service oriented approach must be fully
 tested to guarantee that all the subcomponents behave as one cohesive layer.
\end_layout

\begin_layout Paragraph
This document is structured as follows:
\end_layout

\begin_layout Description
Chapter
\begin_inset space \space{}
\end_inset

1 Provides general information about the ITPD document.
\end_layout

\begin_layout Description
Chapter
\begin_inset space \space{}
\end_inset

2 Explains in details the chosen integration strategy.
 In more details:
\end_layout

\begin_layout Itemize
Lists of the subsystems and their subcomponents involved in this process
\end_layout

\begin_layout Itemize
Specifies the criteria that must be met before integration testing begins
\end_layout

\begin_layout Itemize
Describes the integration testing approach and the rationale behind it 
\end_layout

\begin_layout Itemize
Outlines the order in which components and subcomponents will be integrated
\end_layout

\begin_layout Description
Chapter
\begin_inset space \space{}
\end_inset

3 Describes the type of tests that will be used to verify that every step
 of the integration process above perform as expected.
\end_layout

\begin_layout Description
Chapter
\begin_inset space \space{}
\end_inset

4 Identifies all tools and test equipment needed to accomplish the integration.
 
\end_layout

\begin_layout Description
Chapter
\begin_inset space \space{}
\end_inset

5 Identifies any program stubs or special test data required for each integratio
n step
\end_layout

\begin_layout Subsection
List of Definitions and Abbreviations
\end_layout

\begin_layout Description
DD: Design Document
\end_layout

\begin_layout Description
RASD: Requirement Analysis and Specification Document
\end_layout

\begin_layout Description
ITPD: Integration Test Plan Document
\end_layout

\begin_layout Description
EJB: Enterprise JavaBeans
\end_layout

\begin_layout Description
SOA: Service Oriented Architecture
\end_layout

\begin_layout Description
Component: One of the four tier of the system (Client, Web, Application,
 Database)
\end_layout

\begin_layout Description
Subcomponent: Usually refers to the Application Layer, and refers to a EJB
 that encapsulates a specific part of the business logic of the module
\end_layout

\begin_layout Description
Layer: synonim of 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
Component
\end_layout

\end_inset


\end_layout

\begin_layout Description
Service: synonim of
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
 Subcomponent
\end_layout

\end_inset


\end_layout

\begin_layout Description
Power
\begin_inset space \space{}
\end_inset

User: Registered user of the application
\end_layout

\begin_layout Subsection
List of Reference Documents
\end_layout

\begin_layout Standard
Please refer to the following documents, for additional informations on
 the Power Enjoy System:
\end_layout

\begin_layout Itemize
Project rules of the Software Engineering 2 project
\end_layout

\begin_layout Itemize
Power Enjoy - Requirement Analysis and Specification Document 
\end_layout

\begin_layout Itemize
Power Enjoy - Design Document 
\end_layout

\begin_layout Itemize
\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Documentation of any tool you plan to use for testing 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Integration Strategy
\end_layout

\begin_layout Subsection
Entry Criteria
\end_layout

\begin_layout Standard
This section describes the prerequisites that need to be met before integration
 testing can be started.
\end_layout

\begin_layout Paragraph
Stakeholder Approval 
\end_layout

\begin_layout Standard
First of all, the Requirements Analysis and Specification Document and the
 Design Document must have been presented to the stakeholders for approval
 even before the coding phase can begin, this will ensure that they're satisfied
 with the development.
\end_layout

\begin_layout Paragraph*
Website and Mobile App
\end_layout

\begin_layout Standard
The presentation layer to the user might not be completed but communication
 between the Application Server and Clients, both via the Mobile App and
 via the Web Server, must have clearly structured and coded via RESTful
 APIs using JAX-RS.
\end_layout

\begin_layout Paragraph*
Coding and Testing Application Layer
\end_layout

\begin_layout Itemize
All the classes and methods of the Entity Beans must be coded and must pass
 thorough 
\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Unit tests
\end_layout

\end_inset

.
 Unit tests should have a minimum coverage of 90% of the lines of code and
 should be run automatically at each build using JUnit.
 
\end_layout

\begin_layout Itemize
\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Code inspection
\end_layout

\end_inset

 has to be performed on all the code in order to ensure maintainability,
 respect of conventions and find possible issues which could increase the
 testers’ effort in next testing phases.
 Code inspection should be performed using automated tools when possible.
\end_layout

\begin_layout Itemize
\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Documentation
\end_layout

\end_inset

 of all classes and functions should be well written using JavaDoc.
 The public interfaces of each Entity Bean shoud be clearly stated.
\end_layout

\begin_layout Itemize
\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Object relational mapping
\end_layout

\end_inset

 of each service to its corresponding database should be implemented with
 automated tools to avoid errors (such as Hibernate) and fully tested.
\end_layout

\begin_layout Subsection
Elements to be Integrated
\end_layout

\begin_layout Standard
In this section we’re going to provide a list of all the components that
 need to be integrated together.
 The figure below corrispond to the system architecture already discussed
 in the Design Document.
 
\end_layout

\begin_layout Standard
The system is built upon the interactions of many tiers, each one implementing
 a specific set of functionalities.
 Every tier is also obtained by the combination of several lower-level component
s.
 This modularity causes that the integration phase will involve the integration
 of components at different levels of abstraction.
 In addition our system is in relation with External Systems, which are
 crucial for our application to work.
 It's important that they're correctly integrated to the system in a way
 in which everything is trasparent to the user.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{adjustwidth*}{-2cm}{-2cm}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename images/CompletedArchitecture.png
	lyxscale 20
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{adjustwidth*}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In summary, the elements to integrate are:
\end_layout

\begin_layout Enumerate
Integration of the different services inside the Application Layer.
\end_layout

\begin_layout Enumerate
Integration of different tiers (Client - Web - Application)
\end_layout

\begin_layout Enumerate
Integration and configuration with third party systems (Payment System,
 Assistance System)
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsection
Integration Testing Strategy
\end_layout

\begin_layout Standard
The approach we’re going to use to perform integration testing is based
 on a mixture of the bottom-up and functional-grouping integration strategies.
 This choice is due to the fact that if the entry criteria is met, it's
 reasonable to assume that we have different small services, indipendent
 from one other, that implement correctly a small part of the application
 logic and by integrating them we're able to create a more and more complex
 system that will eventually satisfy all the requirements.
 In a pure bottom-up strategy we would start from the lowest layers of the
 system, testing the basic functionalities, then moving forward the most
 abstract layers but in our case this approach would be unefficient.
 Since every service is dedicated to one part of the business logic we can
 parallelize this testing, focusing on different logic groups at the same
 time, giving more priority to the critical components first and then integratin
g secondary functionalities.
 Moreover, we also need to keep in mind that we're dealing with external
 systems and if we discover some bugs or problems on their side, fixes might
 take time and this would create a time gap in which we're not able to move
 the integration forward.
\end_layout

\begin_layout Standard
For all these reasons we believe that the best integration strategy is the
 following:
\end_layout

\begin_layout Paragraph
PHASE 1: Assure that services in relations with external systems works as
 expected.
 
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
As stated earlier, in order to avoid wasting time we start from the boundary
 of the system.
 This process should be fairly quick if everything was implemented as mutually
 agreed and should immediatly discover issues that we can notify early on
 to external parties.
 In this phase we'll test the communication between
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
 Assistance Service - Assistance System
\end_layout

\end_inset

 and 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
Payment Service - Payment System
\end_layout

\end_inset

.
\end_layout

\begin_layout Paragraph
PHASE 2: Assure that we have control over the Car 
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
This phase is similar to the previous, and can be carried in parallel.
 In this phase we're also in relation with an external system which is the
 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
Car On Board System
\end_layout

\end_inset

 but due to the relevance of this process we've decided to outline it and
 dedicated a whole phase.
 We can't move the integration forward if we're lacking the foundations.
 In a digital management system for a car-sharing service the control over
 the car must be treated as a first class citizen.
 This will avoid a big bang scenario, where we have implemented high level
 functionalities that not reflect the concrete situation of the car in the
 real world.
 These two inital phases will also allow us to 
\begin_inset Quotes eld
\end_inset

forget
\begin_inset Quotes erd
\end_inset

 of external systems in the next phases, and only focus on the relation
 among different services.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Paragraph
PHASE 3: Integration of Services 
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
In this part the bottom-up approach would be used to build complex functionaliti
es integrating different services.
 Since subsystems are fairly independent from one another, the order in
 which they’re integrated together to obtain the full system follows the
 critical-module-first approach.
 This strategy allows us to concentrate our testing efforts on the riskiest
 components first that represent the core functionalities of the whole system.
 By proceeding this way, we are able to discover bugs earlier in the integration
 progress and take the necessary measures to correct them on time.
\end_layout

\begin_layout Standard
The most critical service to integrate is the 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
Reservation Component
\end_layout

\end_inset

 which manages all active reservation made by Power Users, we will ensure
 that it integrates correctly both with the 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
User Component
\end_layout

\end_inset

 and the 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
Car Service
\end_layout

\end_inset

.
 This will ensure that we have a stable prototype of the actual software
 that implements the core functionalities.
 From this prototype we will spread like wildfire, integrating other Components
 that implements all the secondary functionalities.
\end_layout

\begin_layout Standard
In this phase, it is only necessary to use drivers to simulate the top layers
 during the testing, which are a lot easier to produce than stubs.
 
\end_layout

\begin_layout Paragraph
PHASE 4: Integration with top layers 
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
In this phase we will remove the drivers and connect the Application Side
 to the top tiers.
 We must ensure that the Application Layer works with real inputs from the
 
\begin_inset Quotes eld
\end_inset

external word
\begin_inset Quotes erd
\end_inset

 and not only in a simulated and controlled environment.
 The integration should proceed smoothly since the communication via RESTful
 APIs was clearly structured at the beginning of the integration but we
 should focus deeply on errors and expection handling.
\end_layout

\begin_layout Paragraph
PHASE 5: Alpha Test
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
In this phase we'll test the Power Enjoy System as a whole.
 This phase will provide a confirmation of the correctness of the integration
 process and will ensure that we haven't overlooked possible error scenarios.
\end_layout

\begin_layout Subsection
Sequence of Component/Function Integration
\end_layout

\begin_layout Standard
NOTE: The structure of this section may vary depending on the integration
 strategy you select in Section 2.3; use the structure proposed below as
 a non mandatory guide
\end_layout

\begin_layout Subsubsection
Software Integration Sequence
\end_layout

\begin_layout Standard
For each subsystem, identify the sequence in which the software components
 will be integrated within the subsystem; relate this sequence to any product
 features that are being built up.
\end_layout

\begin_layout Subsubsection
Subsystem Integration Sequence
\end_layout

\begin_layout Standard
Identify the order in which subsystems will be integrated; if you have a
 single subsystem, 2.4.1 and 2.4.2 are to be merged in a single section.
 You can refer to Section 2.2 of the test plan example [1] as an example
\end_layout

\begin_layout Section
Individual Steps and Test Description
\end_layout

\begin_layout Standard
For each step of the integration process above, describe the type of tests
 that will be used to verify that the elements integrated in this step perform
 as expected.
 Describe in general the expected results of the test set.
 You may refer to Chapter 3 and Chapter 4 of the test plan example [1] as
 an example of what we expect.
 (NOTE: This is not a detailed description of test protocols.
 Think of this as the test design phase.
 Specific protocols will be written to fulfill the goals of the tests in
 this section.
\end_layout

\begin_layout Section
Tools and Test Equipment Required
\end_layout

\begin_layout Standard
Identify all tools and test equipment needed to accomplish the integration.
 Refer to the tools presented during the lectures.
 Explain why and how you are going to use them.
 Note that you may also use manual testing for some part.
 Consider manual testing as one of the possible tools you have available.
\end_layout

\begin_layout Section
Program Stubs and Test Data Required
\end_layout

\begin_layout Standard
Based on the testing strategy and test design, identify any program stubs
 or special test data required for each integration step.
\end_layout

\begin_layout Section
Effort Spent
\end_layout

\begin_layout Standard
The approximate number of hours of work for each member of the group is
 the following: 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Niccolo’
\begin_inset space \space{}
\end_inset

Raspa 5 Hours
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Matteo
\begin_inset space \space{}
\end_inset

Marinelli y Hours
\end_layout

\end_body
\end_document
